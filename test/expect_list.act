pool: %INT% 1
pool: %LIST% 2

<@
def change_len_before(list, amount):
  return len(list)

def change_len_after(list, amount):
  return len(list)

def change_len_check(before, after, list, amount):
  print "length before:", before, " - length after:", after, " -- amount:", amount
  return after == before + amount
@>

%INT%:=%[1..4]%
%LIST%:=[%INT%]

%LIST% = %LIST% + %LIST%
%LIST% = [%INT%]
%LIST% = [%INT%, %INT%]


expect: ~%LIST%.append(%INT%)                 ==> change_len(%LIST,1%, 1)

expect: ~%LIST% = %LIST,1% + []               ==> change_len(%LIST,1%, 0)

expect: ~%LIST% = %LIST,1% + [%INT%, %INT%]   ==> change_len(%LIST,1%, 2)

# size of the list after in-place duplication has increased by half of its current size (i.e., it was 6 and now is 12, so it had increased by 12/2=6)
expect: ~%LIST% = %LIST,1% + %LIST,1%         ==> change_len(%LIST,1%, len(%LIST,1%)/2) 
